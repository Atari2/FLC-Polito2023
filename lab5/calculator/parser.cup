import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

parser code {:
    public Calculator calc = new Calculator(this);

    public boolean isCorrect = true;

    public void report_error(String message, Object info) {
        System.err.print("ERROR: " + message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.println(" (linea "+line+", colonna "+column+"): token = " + ((Symbol)info).value );
            } else System.err.println(" (EOF)");
        }
    }

    public void syntax_error(Symbol token) {}

    public Symbol getCurSymbol() {
        return (Symbol)stack.elementAt(tos);
    }

    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }
:}

action code {:
     public void scalarNotFound(String name) {
        pSynError("Scalar variable " + name + " was not found");
     }
     public void vectorNotFound(String name) {
        pSynError("Vector variable " + name + " was not found");
     }
     public void invalidOpWarning(Object lhs, Object rhs, Calculator.Op op) {
        String opStr = op.toString();
        String lhsStr = lhs instanceof ArrayList<?> ? " (vector)" : " (scalar)";
        String rhsStr = rhs instanceof ArrayList<?> ? " (vector)" : " (scalar)";
        pSynWarning("Operation " + opStr + " is not supported between " + lhs.toString() + lhsStr + " and " + rhs.toString() + rhsStr);
     }
     public void invalidAssignment(String name, Object rhs) {
        pSynWarning("Assignment to " + name + " with " + rhs.toString() + " is invalid");
     }
     public void pSynError(String message){
         System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
         parser.isCorrect = false;
         parser.done_parsing();
     }
     public void pSynWarning(String message){
         System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
         parser.isCorrect = false;
     }
:}

// Terminal tokens
terminal PLUS;
terminal MINUS;
terminal MULT;
terminal DIV;
terminal POW;
terminal DOT;
terminal LBRACK;
terminal RBRACK;
terminal SEMICOLON;
terminal QUESTION;
terminal EQUALS;
terminal COMMA;
terminal UMINUS;
terminal String VARIABLE;
terminal String VECTOR_VARIABLE;
terminal Double NUMBER;

// Non terminal tokens
non terminal program;
non terminal assignment;
non terminal invalid_expr;
non terminal Double scalar_expr;
non terminal ArrayList<Double> vector_expr;
non terminal ArrayList<Double> vector;
non terminal Double scalar;
non terminal ArrayList<Double> scalar_expr_list;
non terminal line;
non terminal lines;
// Precedences
precedence left PLUS, MINUS;
precedence left DOT;
precedence left MULT, DIV;
precedence left POW;
precedence left UMINUS;
// Production rules
start with program;
scalar ::= NUMBER:n {: RESULT = n; :} |
           MINUS NUMBER:n {: RESULT = -n; :} %prec UMINUS |
           VARIABLE:v {: RESULT = calc.get_variable(v); if (RESULT == null) scalarNotFound(v); :};
vector ::= LBRACK scalar_expr_list:el RBRACK {: RESULT = el; :} |
           VECTOR_VARIABLE:v {: RESULT = calc.get_vector(v); if (RESULT == null) vectorNotFound(v); :};

vector_expr ::= vector:v {: RESULT = v; :} |
                vector_expr:e PLUS:op vector_expr:v {: RESULT = calc.handle_op(e, v, Calculator.Op.PLUS); :} |
                vector_expr:e MINUS:op vector_expr:v {: RESULT = calc.handle_op(e, v, Calculator.Op.MINUS); :} |
                vector_expr:e MULT scalar_expr:s {: RESULT = calc.handle_op(e, s, Calculator.Op.MULT); :} |
                scalar_expr:s MULT vector_expr:e {: RESULT = calc.handle_op(s, e, Calculator.Op.MULT); :} |
                vector_expr:e DIV scalar_expr:s {: RESULT = calc.handle_op(e, s, Calculator.Op.DIV); :};


scalar_expr ::= scalar:s {: RESULT = s; :} |
                scalar_expr:e PLUS scalar_expr:v {: RESULT = calc.handle_op(e, v, Calculator.Op.PLUS); :} |
                scalar_expr:e MINUS scalar_expr:v {: RESULT = calc.handle_op(e, v, Calculator.Op.MINUS); :} |
                scalar_expr:e MULT scalar_expr:v {: RESULT = calc.handle_op(e, v, Calculator.Op.MULT); :} |
                scalar_expr:e DIV scalar_expr:v {: RESULT = calc.handle_op(e, v, Calculator.Op.DIV); :} |
                scalar_expr:e POW scalar_expr:v {: RESULT = calc.handle_op(e, v, Calculator.Op.POW); :} |
                vector_expr:e DOT vector_expr:s {: RESULT = calc.handle_dot(e, s); :};

invalid_expr ::= vector_expr:v PLUS scalar_expr:s error {: invalidOpWarning(v, s, Calculator.Op.PLUS); :} |
                 scalar_expr:s PLUS vector_expr:v error {: invalidOpWarning(s, v, Calculator.Op.PLUS); :} |
                 scalar_expr:s MINUS vector_expr:v error {: invalidOpWarning(s, v, Calculator.Op.MINUS); :} |
                 vector_expr:v MINUS scalar_expr:s error {: invalidOpWarning(v, s, Calculator.Op.MINUS); :} |
                 vector_expr:s DIV vector_expr:v error {: invalidOpWarning(s, v, Calculator.Op.DIV); :} |
                 vector_expr:s MULT vector_expr:v error {: invalidOpWarning(s, v, Calculator.Op.MULT); :} |
                 scalar_expr:s DIV vector_expr:v error {: invalidOpWarning(s, v, Calculator.Op.DIV); :} |
                 scalar_expr:s DOT vector_expr:v error {: invalidOpWarning(s, v, Calculator.Op.DOT); :} |
                 vector_expr:v DOT scalar_expr:s error {: invalidOpWarning(v, s, Calculator.Op.DOT); :} |
                 VARIABLE:v EQUALS vector_expr:e {: invalidAssignment(v, e); :} |
                 VECTOR_VARIABLE:v EQUALS scalar_expr:e {: invalidAssignment(v, e); :};

scalar_expr_list ::= scalar_expr_list:el COMMA scalar_expr:e {: RESULT = Calculator.join_arraylist(el, e); :} | scalar_expr:e {: RESULT = Calculator.make_arraylist(e); :};
assignment ::= VARIABLE:v EQUALS scalar_expr:e {: calc.add_variable(v, e); :} | VECTOR_VARIABLE:v EQUALS vector_expr:e {: calc.add_vector(v, e); :};
line ::= assignment | scalar_expr:e {: Calculator.print(e); :} | vector_expr:e {: Calculator.print(e); :} | invalid_expr;
lines ::= lines line SEMICOLON | line SEMICOLON;
program ::= lines QUESTION {: if (parser.isCorrect) System.out.println("Program correctly recognized"); :};
